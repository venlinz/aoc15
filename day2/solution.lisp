(require "utils" "../utils/utils.lisp")

(defvar *input* (utils:read-lines "./input.txt"))

(defun find-smallest-of-3(x y z)
  (if (< x y)
    (if (< x z) x z)
    (if (< y z) y z)
    )
  )

(defun get-num-till-x(line)
  (let ((x-pos (search "x" line)))
    (if (null x-pos) (setq x-pos (length line)))
    (subseq line 0 x-pos)
    )
  )

(defun remove-till-first-x(line)
  (let ((x-pos (search "x" line)))
    (if (null x-pos) (setq x-pos (length line)))
    (remove-if #'(lambda(x) (not (null x))) line :count (1+ x-pos))
    )
  )

(defun get-l-w-h(line)
  (let ((l 0)(w 0)(h 0))
    (let ((start 0) (end (length line)))
      (setq l (parse-integer (get-num-till-x line)))
      (setq line (remove-till-first-x line))
      (setq w (parse-integer (get-num-till-x line)))
      (setq line (remove-till-first-x line))
      (setq h (parse-integer (get-num-till-x line)))
      (values l w h)
      )
    )
  )

(defun part1()
  (setq total-surface-area-needed 0)
  (dolist (line *input*)
    (setf (values l w h) (get-l-w-h line))
    ;; (format t "~%l: ~a, w: ~a, h: ~a~%" l w h)
    (setq top-sheet-area    (* 2 l w))
    (setq front-face-area (* 2 w h))
    (setq side-face-area  (* 2 l h))
    (setq smallest-side-area (floor (find-smallest-of-3 top-sheet-area front-face-area side-face-area) 2))
    (setq total-surface-area-needed (+ total-surface-area-needed top-sheet-area front-face-area side-face-area smallest-side-area))
    )
  (format t "~%total-surface-area-needed: ~a~%" total-surface-area-needed)
  )

(defun part2()
  (setq total-required-ribbon-length 0)
  (dolist (line *input*)
    (setf (values l w h) (get-l-w-h line))
    (setq top-sheet-len  (+ l w))
    (setq front-face-len (+ w h))
    (setq side-face-len  (+ l h))
    (setq smallest-side-len (find-smallest-of-3 top-sheet-len front-face-len side-face-len))
    (setq total-required-ribbon-length (+ total-required-ribbon-length (* 2 smallest-side-len) (* l w h)))
    )
  (format t "~%total-required-ribbon-length: ~a~%" total-required-ribbon-length)
  )

(part1)
(part2)
